'use strict';
var header = require('gulp-header');
var browserify = require('browserify');
var gulp = require('gulp');
var source = require('vinyl-source-stream');
var buffer = require('vinyl-buffer');
var uglify = require('gulp-uglify');
var sourcemaps = require('gulp-sourcemaps');
var gutil = require('gulp-util');
var fs = require('fs');

var pkg = JSON.parse(fs.readFileSync('./package.json'));

var banner = ['/**',
    ' * <%= pkg.name %> - <%= pkg.description %>',
    ' * Copyright (c) Matt McFarland - All Rights Reserved',
    ' * @version v<%= pkg.version %>',
    ' * @link <%= pkg.homepage %>',
    ' * @license <%= pkg.license %>',
    ' */',
    ''].join('\n');



gulp.task('dist', function () {
    // set up the browserify instance on a task basis
    var b = browserify({
        entries: './src',
        debug: false,
        standalone: 'Ax'
    });
    return b
        .bundle()
        .pipe(source('Ax.js'))
        .pipe(buffer())
        .pipe(header(banner, { pkg : pkg } ))
        // Add transformation tasks to the pipeline here.
        .on('error', gutil.log)
        .pipe(gulp.dest('./dist'));
});

gulp.task('dist-min', function () {
    // set up the browserify instance on a task basis
    var b = browserify({
        entries: './src',
        debug: false,
        standalone: 'Ax'
    });
    return b
        .bundle()
        .pipe(source('Ax.min.js'))
        .pipe(buffer())
        .pipe(sourcemaps.init({loadMaps: true}))
        // Add transformation tasks to the pipeline here.
        .pipe(uglify({mangle: true, screwie8: true}))
        .on('error', gutil.log)
        .pipe(sourcemaps.write('./'))
        .pipe(gulp.dest('./dist'));
});

gulp.task('node', function () {
    // set up the browserify instance on a task basis
    var b = browserify({
        entries: './src',
        debug: true
    });
    return b
        .bundle()
        .pipe(source('index.js'))
        .pipe(buffer())
        // Add transformation tasks to the pipeline here.
        .on('error', gutil.log)
        .pipe(header(banner, { pkg : pkg } ))
        .pipe(gulp.dest('./lib'));
});


gulp.task('default', ['node', 'dist', 'dist-min']);
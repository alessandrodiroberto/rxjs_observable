/**
 * axjs - A microscopic, RESTful, AJAX browser library; just under 2kb.
 * Copyright (c) Matt McFarland - All Rights Reserved
 * @version v0.3.1
 * @link https://github.com/MattMcFarland/ax.js
 * @license MIT
 */
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var
    args        = Array.prototype.slice.call(arguments),
    xhr         = require ('./xhr'),
    getOpts     = require ('./getOptions');



module.exports = function() {
    return xhr(getOpts(args))();
}

},{"./getOptions":2,"./xhr":4}],2:[function(require,module,exports){
module.exports = function () {
    if (arguments) {
        var args = Array.prototype.slice.call(arguments)[0];
        if (typeof args[0] === 'object') {
            var obj = args[0];
            return {
                method: obj.method || 'GET',
                url: obj.url || null,
                data: obj.data || null,
                type: obj.type || 'application/json',
                done: (typeof args[args.length-1] === 'function') ? args[args.length-1] : obj.done
            }
        } else {
            return {
                method: args[0] || null,
                url: args[1] || args[0],
                data: (typeof args[2] === 'object') ? args[2] : (typeof args[1] === 'object') ? args[1] : null,
                type: (typeof args[3] === 'string') ? args[3] : (typeof args[2] === 'string') ? args[2] : null,
                done: (typeof args[args.length-1] === 'function') ? args[args.length-1] : null
            }
        }
    }
};
},{}],3:[function(require,module,exports){
module.exports = function (req) {
    var result;
    var err = false;
    try {
        result = JSON.parse(req.responseText);
    } catch (e) {
        result = String(req.responseText);
        err = e;
    }
    return [result, req, err];
};
},{}],4:[function(require,module,exports){
/**
 * Ax
 * @author Matt McFarland
 *
 * Ajax that is sharp.
 */
var parse = require ('./parse');
module.exports = function (opts) {
    if (!opts.done) { console.error('done callback is undefined')}
    if (!opts.method) { console.error('Ax.js method is undefined')}
    if (typeof opts.done !== 'function') { console.error('done callback is not a function')}
    var res,
        req = new XMLHttpRequest() || new ActiveXObject("Microsoft.XMLHTTP");

    req.open(opts.method, opts.url, true);
    req.setRequestHeader('Content-type', opts.content_type || 'application/json');

    req.onreadystatechange = function () {
        var state = req.readyState, res = function () {};
        if (state === 4) { opts.done.apply(res, parse(req)); }
    };

    if (opts.data) {
        if (opts.content_type !== 'application/json') { req.send(encodeURIComponent(JSON.stringify(opts.data))); }
        else { req.send(opts.data); }
    }
    else { req.send(); }

    return res;
};


},{"./parse":3}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMiLCJzcmMvZ2V0T3B0aW9ucy5qcyIsInNyYy9wYXJzZS5qcyIsInNyYy94aHIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJ2YXJcbiAgICBhcmdzICAgICAgICA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksXG4gICAgeGhyICAgICAgICAgPSByZXF1aXJlICgnLi94aHInKSxcbiAgICBnZXRPcHRzICAgICA9IHJlcXVpcmUgKCcuL2dldE9wdGlvbnMnKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHhocihnZXRPcHRzKGFyZ3MpKSgpO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGFyZ3VtZW50cykge1xuICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cylbMF07XG4gICAgICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBhcmdzWzBdO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IG9iai5tZXRob2QgfHwgJ0dFVCcsXG4gICAgICAgICAgICAgICAgdXJsOiBvYmoudXJsIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0YTogb2JqLmRhdGEgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICB0eXBlOiBvYmoudHlwZSB8fCAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgZG9uZTogKHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoLTFdID09PSAnZnVuY3Rpb24nKSA/IGFyZ3NbYXJncy5sZW5ndGgtMV0gOiBvYmouZG9uZVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IGFyZ3NbMF0gfHwgbnVsbCxcbiAgICAgICAgICAgICAgICB1cmw6IGFyZ3NbMV0gfHwgYXJnc1swXSxcbiAgICAgICAgICAgICAgICBkYXRhOiAodHlwZW9mIGFyZ3NbMl0gPT09ICdvYmplY3QnKSA/IGFyZ3NbMl0gOiAodHlwZW9mIGFyZ3NbMV0gPT09ICdvYmplY3QnKSA/IGFyZ3NbMV0gOiBudWxsLFxuICAgICAgICAgICAgICAgIHR5cGU6ICh0eXBlb2YgYXJnc1szXSA9PT0gJ3N0cmluZycpID8gYXJnc1szXSA6ICh0eXBlb2YgYXJnc1syXSA9PT0gJ3N0cmluZycpID8gYXJnc1syXSA6IG51bGwsXG4gICAgICAgICAgICAgICAgZG9uZTogKHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoLTFdID09PSAnZnVuY3Rpb24nKSA/IGFyZ3NbYXJncy5sZW5ndGgtMV0gOiBudWxsXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJlcSkge1xuICAgIHZhciByZXN1bHQ7XG4gICAgdmFyIGVyciA9IGZhbHNlO1xuICAgIHRyeSB7XG4gICAgICAgIHJlc3VsdCA9IEpTT04ucGFyc2UocmVxLnJlc3BvbnNlVGV4dCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXN1bHQgPSBTdHJpbmcocmVxLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgIGVyciA9IGU7XG4gICAgfVxuICAgIHJldHVybiBbcmVzdWx0LCByZXEsIGVycl07XG59OyIsIi8qKlxuICogQXhcbiAqIEBhdXRob3IgTWF0dCBNY0ZhcmxhbmRcbiAqXG4gKiBBamF4IHRoYXQgaXMgc2hhcnAuXG4gKi9cbnZhciBwYXJzZSA9IHJlcXVpcmUgKCcuL3BhcnNlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gICAgaWYgKCFvcHRzLmRvbmUpIHsgY29uc29sZS5lcnJvcignZG9uZSBjYWxsYmFjayBpcyB1bmRlZmluZWQnKX1cbiAgICBpZiAoIW9wdHMubWV0aG9kKSB7IGNvbnNvbGUuZXJyb3IoJ0F4LmpzIG1ldGhvZCBpcyB1bmRlZmluZWQnKX1cbiAgICBpZiAodHlwZW9mIG9wdHMuZG9uZSAhPT0gJ2Z1bmN0aW9uJykgeyBjb25zb2xlLmVycm9yKCdkb25lIGNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uJyl9XG4gICAgdmFyIHJlcyxcbiAgICAgICAgcmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCkgfHwgbmV3IEFjdGl2ZVhPYmplY3QoXCJNaWNyb3NvZnQuWE1MSFRUUFwiKTtcblxuICAgIHJlcS5vcGVuKG9wdHMubWV0aG9kLCBvcHRzLnVybCwgdHJ1ZSk7XG4gICAgcmVxLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtdHlwZScsIG9wdHMuY29udGVudF90eXBlIHx8ICdhcHBsaWNhdGlvbi9qc29uJyk7XG5cbiAgICByZXEub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RhdGUgPSByZXEucmVhZHlTdGF0ZSwgcmVzID0gZnVuY3Rpb24gKCkge307XG4gICAgICAgIGlmIChzdGF0ZSA9PT0gNCkgeyBvcHRzLmRvbmUuYXBwbHkocmVzLCBwYXJzZShyZXEpKTsgfVxuICAgIH07XG5cbiAgICBpZiAob3B0cy5kYXRhKSB7XG4gICAgICAgIGlmIChvcHRzLmNvbnRlbnRfdHlwZSAhPT0gJ2FwcGxpY2F0aW9uL2pzb24nKSB7IHJlcS5zZW5kKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShvcHRzLmRhdGEpKSk7IH1cbiAgICAgICAgZWxzZSB7IHJlcS5zZW5kKG9wdHMuZGF0YSk7IH1cbiAgICB9XG4gICAgZWxzZSB7IHJlcS5zZW5kKCk7IH1cblxuICAgIHJldHVybiByZXM7XG59O1xuXG4iXX0=
